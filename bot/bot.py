import asyncio
import os
import requests
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
from news import get_news
from trends import get_trends
from blog import save_draft

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è VADER –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞—Å—Ç—Ä–æ—é
nltk.download('vader_lexicon', quiet=True)
sid = SentimentIntensityAnalyzer()

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω —ñ–∑ Render
HF_TOKEN = os.getenv("HF_TOKEN")  # Hugging Face —Ç–æ–∫–µ–Ω
GOOGLE_TRANSLATE_KEY = os.getenv("GOOGLE_TRANSLATE_KEY")  # Google Translate –∫–ª—é—á
CHANNEL_ID = "@HyperballoidAIArt"
X_TOKEN = os.getenv("X_TOKEN", "YOUR_X_TOKEN")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY", "YOUR_NEWSAPI_KEY")
WP_URL = os.getenv("WP_URL", "YOUR_WORDPRESS_URL")
WP_AUTH = (os.getenv("WP_AUTH_USERNAME", "username"), os.getenv("WP_AUTH_PASSWORD", "password"))

# –°—Ç–∞—Ç–∏—á–Ω–∞ –±–∞–∑–∞ –≥—Ä–∞–Ω—Ç—ñ–≤
GRANTS_DB = [
    {"name": "NFT Art Grant", "url": "https://www.artstation.com", "deadline": "2025-06-01", "desc": "–ì—Ä–∞–Ω—Ç –¥–ª—è NFT-–º–∏—Ç—Ü—ñ–≤"},
    {"name": "AI Innovation Fund", "url": "https://www.grants.gov", "deadline": "2025-07-15", "desc": "–§–æ–Ω–¥ –¥–ª—è AI-–ø—Ä–æ—î–∫—Ç—ñ–≤"},
    {"name": "VR Creator Award", "url": "https://spatial.io", "deadline": "2025-05-30", "desc": "–ù–∞–≥–æ—Ä–æ–¥–∞ –¥–ª—è VR-–∞—Ä—Ç—É"}
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    if lang.startswith("uk"):
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç @HyperballoidAIArt. –ö–æ–º–∞–Ω–¥–∏:\n"
            "/guide - –ì–∞–π–¥–∏ (AI, NFT, VR)\n/nft - –ú–æ—ó NFT\n/news - –ù–æ–≤–∏–Ω–∏\n"
            "/trends - –¢—Ä–µ–Ω–¥–∏\n/poll - –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è\n/giveaway - –†–æ–∑—ñ–≥—Ä–∞—à\n"
            "/challenge - –ß–µ–ª–µ–Ω–¥–∂\n/prompt - –ü—Ä–æ–º–ø—Ç –¥–ª—è Leonardo.ai\n"
            "/draft - –ß–µ—Ä–Ω–µ—Ç–∫–∞ —Å—Ç–∞—Ç—Ç—ñ\n/publish - –ü–æ—à–∏—Ä–µ–Ω–Ω—è\n/collab - –ö–æ–ª–∞–±–æ—Ä–∞—Ü—ñ—ó\n"
            "/contest - –ö–æ–Ω–∫—É—Ä—Å–∏\n/grants - –ü–æ—à—É–∫ –≥—Ä–∞–Ω—Ç—ñ–≤\n/chat - –ü–æ–≥–æ–≤–æ—Ä–∏ –∑—ñ –º–Ω–æ—é\n"
            "/analyze - –ê–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—é —Ç–µ–∫—Å—Ç—É\n/postart - –ü–æ—à–∏—Ä–µ–Ω–Ω—è –∞—Ä—Ç—É\n/invite - –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–∑—ñ–≤"
        )
    else:
        await update.message.reply_text(
            "Hi! I'm @HyperballoidAIArt‚Äôs bot. Commands:\n"
            "/guide - Guides (AI, NFT, VR)\n/nft - My NFTs\n/news - News\n"
            "/trends - Trends\n/poll - Poll\n/giveaway - Raffle\n"
            "/challenge - Challenge\n/prompt - Leonardo.ai prompt\n"
            "/draft - Article draft\n/publish - Share\n/collab - Collabs\n"
            "/contest - Contests\n/grants - Search grants\n/chat - Talk to me\n"
            "/analyze - Analyze text sentiment\n/postart - Share art\n/invite - Invite friends"
        )

async def guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    topic = context.args[0] if context.args else "ai"
    guides_en = {
        "ai": "üé® AI Art Guide:\n1. Go to leonardo.ai\n2. Use /prompt\n3. Mint on Binance (/buy)",
        "nft": "üí∏ NFT Guide:\n1. Join Binance NFT\n2. Mint with /nft\n3. Promote with /publish",
        "vr": "üï∂Ô∏è VR Guide:\n1. Try Spatial.io\n2. Upload NFT\n3. Share with /vr"
    }
    guides_uk = {
        "ai": "üé® –ì–∞–π–¥ –∑ AI-–∞—Ä—Ç—É:\n1. –ó–∞–π–¥–∏ –Ω–∞ leonardo.ai\n2. –°–ø—Ä–æ–±—É–π /prompt\n3. –ú—ñ–Ω—Ç–∏ –Ω–∞ Binance (/buy)",
        "nft": "üí∏ –ì–∞–π–¥ –∑ NFT:\n1. –ü—Ä–∏—î–¥–Ω–∞–π—Å—è –¥–æ Binance NFT\n2. –ú—ñ–Ω—Ç–∏ –∑ /nft\n3. –ü—Ä–æ—Å—É–≤–∞–π –∑ /publish",
        "vr": "üï∂Ô∏è –ì–∞–π–¥ –∑ VR:\n1. –°–ø—Ä–æ–±—É–π Spatial.io\n2. –ó–∞–≤–∞–Ω—Ç–∞–∂ NFT\n3. –ü–æ–¥—ñ–ª–∏—Å—å –∑ /vr"
    }
    guides = guides_uk if lang.startswith("uk") else guides_en
    await update.message.reply_text(guides.get(topic, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /guide ai, /guide nft –∞–±–æ /guide vr" if lang.startswith("uk") else "Use /guide ai, /guide nft, or /guide vr"))

async def nft(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    caption = "–ú—ñ–π –æ—Å—Ç–∞–Ω–Ω—ñ–π NFT! –ú—ñ–Ω—Ç–∏: https://www.binance.com/en/nft" if lang.startswith("uk") else "My latest NFT! Mint: https://www.binance.com/en/nft"
    try:
        await update.message.reply_photo(
            photo="https://hyperballoid.github.io/assets/nft/nft_1.png",
            caption=caption
        )
    except:
        await update.message.reply_text("NFT –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è!" if lang.startswith("uk") else "NFT not found. Add an image!")

async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    try:
        articles = get_news(NEWSAPI_KEY)
        if not articles:
            raise Exception("No news")
        response = "\n".join(f"üì∞ {a['title']}: {a['url']}" for a in articles)
        if lang.startswith("uk"):
            await update.message.reply_text(f"–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ AI-–∞—Ä—Ç—É:\n{response}")
        else:
            await update.message.reply_text(f"Latest AI art news:\n{response}")
    except:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –Ω–æ–≤–∏–Ω. –ü–µ—Ä–µ–≤—ñ—Ä NEWSAPI_KEY." if lang.startswith("uk") else "News error. Check NEWSAPI_KEY.")

async def trends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    try:
        trends = get_trends()
        response = ", ".join(trends)
        if lang.startswith("uk"):
            await update.message.reply_text(f"üî• –¢—Ä–µ–Ω–¥–∏: {response}")
        else:
            await update.message.reply_text(f"üî• Trends: {response}")
    except:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω–¥—ñ–≤." if lang.startswith("uk") else "Trends error.")

async def poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    question = "–Ø–∫–∏–π —Å—Ç–∏–ª—å NFT –Ω–∞—Å—Ç—É–ø–Ω–∏–π?" if lang.startswith("uk") else "Which NFT style next?"
    await update.message.reply_poll(
        question=question,
        options=["Cyberpunk", "Anime", "Abstract"],
        is_anonymous=False
    )

async def giveaway(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    text = "üéÅ –í–∏–≥—Ä–∞–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π NFT! –ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ @HyperballoidAIArt —ñ –∑—Ä–æ–±–∏ —Ä–µ–ø–æ—Å—Ç —É X!" if lang.startswith("uk") else "üéÅ Win a free NFT! Follow @HyperballoidAIArt and retweet on X!"
    await update.message.reply_text(text)

async def challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    text = "üèÜ –ß–µ–ª–µ–Ω–¥–∂: –°—Ç–≤–æ—Ä–∏ AI-–∞—Ä—Ç —ñ–∑ /prompt —ñ –ø–æ–∑–Ω–∞—á @HyperballoidAIArt!" if lang.startswith("uk") else "üèÜ Challenge: Create AI art with /prompt and tag @HyperballoidAIArt!"
    await update.message.reply_text(text)

async def prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    topic = " ".join(context.args) or "cyberpunk Kyiv"
    prompt_text = f"{topic}, neon lights, 3000x3000px"
    if lang.startswith("uk"):
        await update.message.reply_text(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è Leonardo.ai: '{prompt_text}'")
    else:
        await update.message.reply_text(f"Leonardo.ai prompt: '{prompt_text}'")

async def draft(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    topic = " ".join(context.args) or "AI art trends"
    try:
        save_draft(topic)
        if lang.startswith("uk"):
            await update.message.reply_text(f"–ß–µ—Ä–Ω–µ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {topic}. –ü–µ—Ä–µ–≤—ñ—Ä blog/{topic.replace(' ', '_')}.md")
        else:
            await update.message.reply_text(f"Draft saved: {topic}. Check blog/{topic.replace(' ', '_')}.md")
    except:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ —á–µ—Ä–Ω–µ—Ç–∫–∏. –°–ø—Ä–æ–±—É–π —â–µ." if lang.startswith("uk") else "Draft error. Try again.")

async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    platform = context.args[0] if context.args else "all"
    topic = context.user_data.get("topic", "AI art update")
    message = f"–ù–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è AI-–∞—Ä—Ç—É! –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å: https://t.me/HyperballoidAIArt #NFTart" if lang.startswith("uk") else f"New AI art update! Join: https://t.me/HyperballoidAIArt #NFTart"
    
    try:
        if platform in ("tg", "all"):
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=message
            )
        if platform in ("x", "all") and X_TOKEN != "YOUR_X_TOKEN":
            requests.post(
                "https://api.twitter.com/2/tweets",
                headers={"Authorization": f"Bearer {X_TOKEN}"},
                json={"text": message}
            )
        if platform in ("wp", "all") and WP_URL != "YOUR_WORDPRESS_URL":
            requests.post(
                f"{WP_URL}/wp-json/wp/v2/posts",
                auth=WP_AUTH,
                json={"title": topic, "content": message, "status": "publish"}
            )
        await update.message.reply_text("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!" if lang.startswith("uk") else "Published!")
    except:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó." if lang.startswith("uk") else "Publish error.")

async def collab(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    text = "ü§ù –ö–æ–ª–∞–±–æ—Ä–∞—Ü—ñ—ó: –ó–Ω–∞–π—à–æ–≤ @AIArtistX –Ω–∞ X –¥–ª—è NFT-–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞!" if lang.startswith("uk") else "ü§ù Collabs: Found @AIArtistX on X for NFT partnership!"
    await update.message.reply_text(text)

async def contest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    text = "üèÖ –ö–æ–Ω–∫—É—Ä—Å–∏: –°–ø—Ä–æ–±—É–π –≥—Ä–∞–Ω—Ç–∏ –¥–ª—è –º–∏—Ç—Ü—ñ–≤! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /grants –¥–ª—è –¥–µ—Ç–∞–ª–µ–π." if lang.startswith("uk") else "üèÖ Contests: Try artist grants! Use /grants for details."
    await update.message.reply_text(text)

async def grants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    try:
        response = "\n".join(f"üèÜ {g['name']} (–¥–æ {g['deadline']}): {g['desc']} ({g['url']})" for g in GRANTS_DB)
        if lang.startswith("uk"):
            await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä–∞–Ω—Ç–∏:\n{response}\n–î–æ–¥–∞–π —Å–≤–æ—ó —á–µ—Ä–µ–∑ GitHub!")
        else:
            await update.message.reply_text(f"Available grants:\n{response}\nAdd yours via GitHub!")
    except:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –≥—Ä–∞–Ω—Ç—ñ–≤." if lang.startswith("uk") else "Grants search error.")

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —â–æ—Å—å –¥–ª—è —Ä–æ–∑–º–æ–≤–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /chat –©–æ —Ç–∞–∫–µ AI-–∞—Ä—Ç?" if lang.startswith("uk") else "Write something to talk about, e.g., /chat What is AI art?")
        return
    
    try:
        # –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É, —è–∫—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
        query_to_hf = query
        if lang.startswith("uk") and GOOGLE_TRANSLATE_KEY:
            response = requests.get(
                f"https://translation.googleapis.com/language/translate/v2?key={GOOGLE_TRANSLATE_KEY}",
                params={"q": query, "source": "uk", "target": "en"}
            )
            response.raise_for_status()
            query_to_hf = response.json()["data"]["translations"][0]["translatedText"]
        
        # –ó–∞–ø–∏—Ç –¥–æ Hugging Face
        headers = {"Authorization": f"Bearer {HF_TOKEN}"}
        payload = {"inputs": query_to_hf, "parameters": {"max_new_tokens": 100}}
        response = requests.post(
            "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill",
            headers=headers,
            json=payload
        )
        response.raise_for_status()
        answer = response.json()[0]["generated_text"]
        
        # –ü–µ—Ä–µ–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
        if lang.startswith("uk") and GOOGLE_TRANSLATE_KEY:
            response = requests.get(
                f"https://translation.googleapis.com/language/translate/v2?key={GOOGLE_TRANSLATE_KEY}",
                params={"q": answer, "source": "en", "target": "uk"}
            )
            response.raise_for_status()
            answer = response.json()["data"]["translations"][0]["translatedText"]
        
        await update.message.reply_text(answer)
    except:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ —á–∞—Ç—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!" if lang.startswith("uk") else "Chat error. Try again!")

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /analyze –Ø –ª—é–±–ª—é AI-–∞—Ä—Ç!" if lang.startswith("uk") else "Write text to analyze, e.g., /analyze I love AI art!")
        return
    
    try:
        scores = sid.polarity_scores(text)
        sentiment = "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π" if scores['compound'] > 0 else "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π" if scores['compound'] < 0 else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"
        if lang.startswith("uk"):
            await update.message.reply_text(f"–ù–∞—Å—Ç—Ä—ñ–π —Ç–µ–∫—Å—Ç—É: {sentiment} (–ø–æ–∑–∏—Ç–∏–≤: {scores['pos']}, –Ω–µ–≥–∞—Ç–∏–≤: {scores['neg']}, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π: {scores['neu']})")
        else:
            await update.message.reply_text(f"Text sentiment: {sentiment} (positive: {scores['pos']}, negative: {scores['neg']}, neutral: {scores['neu']})")
    except:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É. –°–ø—Ä–æ–±—É–π —â–µ!" if lang.startswith("uk") else "Analysis error. Try again!")

async def postart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    if not update.message.photo:
        await update.message.reply_text(
            "–ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–≤–æ—î—ó —Ä–æ–±–æ—Ç–∏!" if lang.startswith("uk") else "Send an image of your artwork!"
        )
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]
    context.user_data["art_photo"] = photo.file_id
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–ø–∏—Å —á–µ—Ä–µ–∑ Hugging Face
    try:
        headers = {"Authorization": f"Bearer {HF_TOKEN}"}
        payload = {"inputs": "Describe a digital artwork in a cyberpunk style", "parameters": {"max_new_tokens": 50}}
        response = requests.post(
            "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill",
            headers=headers,
            json=payload
        )
        response.raise_for_status()
        description = response.json()[0]["generated_text"]
    except:
        description = "A stunning digital artwork inspired by cyberpunk aesthetics."
    
    context.user_data["art_description"] = description
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ —Ä–æ–∑–º—ñ—Ä
    await update.message.reply_text(
        f"–û–ø–∏—Å: {description}\n–í–∫–∞–∂–∏ —Ä–æ–∑–º—ñ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1080x1080):" if lang.startswith("uk")
        else f"Description: {description}\nSpecify size (e.g., 1080x1080):"
    )
    context.user_data["postart_step"] = "size"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    if context.user_data.get("postart_step") == "size":
        context.user_data["art_size"] = update.message.text
        context.user_data["postart_step"] = "confirm"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —á–µ—Ä–Ω–µ—Ç–∫—É
        photo = context.user_data["art_photo"]
        description = context.user_data["art_description"]
        size = context.user_data["art_size"]
        
        keyboard = [
            [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_post"),
             InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_post")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption=f"–ß–µ—Ä–Ω–µ—Ç–∫–∞:\n–û–ø–∏—Å: {description}\n–†–æ–∑–º—ñ—Ä: {size}" if lang.startswith("uk")
            else f"Draft:\nDescription: {description}\nSize: {size}",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–ù–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /postart!" if lang.startswith("uk")
            else "Send a command, e.g., /postart!"
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = update.effective_user.language_code
    
    if query.data == "confirm_post":
        photo = context.user_data["art_photo"]
        description = context.user_data["art_description"]
        size = context.user_data["art_size"]
        
        await query.message.reply_text(
            f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!\n–û–ø–∏—Å: {description}\n–†–æ–∑–º—ñ—Ä: {size}" if lang.startswith("uk")
            else f"Published!\nDescription: {description}\nSize: {size}"
        )
        context.user_data.clear()
    elif query.data == "cancel_post":
        await query.message.reply_text(
            "–°–∫–∞—Å–æ–≤–∞–Ω–æ." if lang.startswith("uk") else "Cancelled."
        )
        context.user_data.clear()

async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.effective_user.language_code
    text = "–ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤ –¥–æ @HyperballoidAIArt –¥–ª—è AI-–∞—Ä—Ç—É —Ç–∞ NFT! –õ—ñ–Ω–∫: https://t.me/HyperballoidAIArt" if lang.startswith("uk") else "Invite friends to @HyperballoidAIArt for AI art & NFTs! Link: https://t.me/HyperballoidAIArt"
    await update.message.reply_text(text)

async def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("guide", guide))
        application.add_handler(CommandHandler("nft", nft))
        application.add_handler(CommandHandler("news", news))
        application.add_handler(CommandHandler("trends", trends))
        application.add_handler(CommandHandler("poll", poll))
        application.add_handler(CommandHandler("giveaway", giveaway))
        application.add_handler(CommandHandler("challenge", challenge))
        application.add_handler(CommandHandler("prompt", prompt))
        application.add_handler(CommandHandler("draft", draft))
        application.add_handler(CommandHandler("publish", publish))
        application.add_handler(CommandHandler("collab", collab))
        application.add_handler(CommandHandler("contest", contest))
        application.add_handler(CommandHandler("grants", grants))
        application.add_handler(CommandHandler("chat", chat))
        application.add_handler(CommandHandler("analyze", analyze))
        application.add_handler(CommandHandler("postart", postart))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(CommandHandler("invite", invite))

        await application.initialize()
        await application.start()
        await application.updater.start_polling(poll_interval=1.0, timeout=10, drop_pending_updates=True)
        print("Bot started")
    except Exception as e:
        print(f"Bot error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
